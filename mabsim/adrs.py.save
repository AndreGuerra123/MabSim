
from fenics import *

T = 5.0            # final time
num_steps = 5    # number of time steps
dt = T / num_steps # time step size
K = 10.0           # reaction rate

# Read mesh from file
mesh =  UnitIntervalMesh(5)

# Define function space for system of concentrations
P1 = FiniteElement('P', interval, 1)
element = MixedElement([P1, P1, P1])
V = FunctionSpace(mesh, element)

# Define test functions
v_1, v_2, v_3 = TestFunctions(V)

# Define functions for velocity and concentrations
u = Function(V)
u_n = Function(V)

# Split system functions to access components
u_1, u_2, u_3 = split(u)
u_n1, u_n2, u_n3 = split(u_n)

# Define source terms
f_1 = Constant(1)
f_2 = Constant(1)
f_3 = Constant(0)

# Define expressions used in variational forms
k = Constant(dt)
K = Constant(K)
w = Constant((1,1,1))

print(grad(u_1))

# Define variational problem
F = (((u_1 - u_n1) / k)*v_1*dx + dot(w, grad(u_1))*v_1*dx + K*u_1*u_2*v_1*dx  \
  + ((u_2 - u_n2) / k)*v_2*dx + dot(w, grad(u_2)*v_2*dx + K*u_1*u_2*v_2*dx  \
  + ((u_3 - u_n3) / k)*v_3*dx + dot(w, grad(u_3))*v_3*dx - K*u_1*u_2*v_3*dx + K*u_3*v_3*dx \
  - f_1*v_1*dx - f_2*v_2*dx - f_3*v_3*dx) \



# Create VTK files for visualization output
vtkfileu1 = File('reaction_system/u_1.pvd')
vtkfileu2 = File('reaction_system/u_2.pvd')
vtkfileu3 = File('reaction_system/u_3.pvd')


t = 0
for n in range(num_steps):

    # Update current time
    t += dt

    # Solve variational problem for time step
    solve(F == 0, u)

    # Save solution to file (VTK)
    _u_1, _u_2, _u_3 = u.split()
    vtkfileu1 << (_u_1, t)
    vtkfileu2 << (_u_2, t)
    vtkfileu3 << (_u_3, t)

    # Update previous solution
    u_n.assign(u)


